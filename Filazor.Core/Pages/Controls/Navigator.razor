@using System.IO

<style>
    .material-icons {
        font-size: 16px;
    }
</style>

<div class="btn-toolbar py-1" role="toolbar">

    <button type="button" class="btn btn-light btn-sm mr-1" disabled="@disabledBackButton" @onclick="Back">
        <i class="material-icons align-middle">
            arrow_back
        </i>
    </button>
    <button type="button" class="btn btn-light btn-sm mr-1" disabled="@disabledForwardButton" @onclick="Forward">
        <i class="material-icons align-middle">
            arrow_forward
        </i>
    </button>
    @*<button type="button" class="btn btn-light btn-sm mr-1">
            <i class="material-icons align-middle">
                expand_more
            </i>
        </button>*@
    <button type="button" class="btn btn-light btn-sm mr-1" disabled="@disabledUpwardButton" @onclick="Upward">
        <i class="material-icons align-middle">
            arrow_upward
        </i>
    </button>

</div>

@code {

    private bool disabledBackButton = true;
    private bool disabledForwardButton = true;
    private bool disabledUpwardButton = true;

    private bool isBacking = false;
    private bool isForwarding = false;

    private string currentDirectoryPath;
    private Stack<string> backDirStack = new Stack<string>();
    private Stack<string> forwardDirStack = new Stack<string>();

    [Parameter]
    public EventCallback<string> BackAndForwardCallback { get; set; }

    [Parameter]
    public EventCallback<string> UpwardCallback { get; set; }


    [Parameter]
    public string CurrentDirectoryPath
    {
        get
        {
            return currentDirectoryPath;
        }
        set
        {
            if (value == null)
            {
                currentDirectoryPath = null;
                return;
            }

            if (currentDirectoryPath != null
                && currentDirectoryPath == value)
            {
                return;
            }

            currentDirectoryPath = value;

            if (isBacking == false)
            {
                //Console.WriteLine("Back Push: {0}", value);
                backDirStack.Push(value);
            }
            else
            {
                isBacking = false;
            }

            if (isForwarding == false)
            {
                //Console.WriteLine("Foward Push: {0}", value);
                forwardDirStack.Push(value);
            }
            else
            {
                isForwarding = false;
            }
        }
    }


    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        SetButon();

        return base.OnAfterRenderAsync(firstRender);
    }

    private void SetButon()
    {
        disabledBackButton = backDirStack.Count == 0;
        disabledForwardButton = forwardDirStack.Count == 0;
        disabledUpwardButton = currentDirectoryPath == null;
    }


    private async void Back()
    {
        isBacking = true;

        var path = backDirStack.Pop();
        forwardDirStack.Push(path);

        await BackAndForwardCallback.InvokeAsync(path);

        SetButon();
    }

    private async void Forward()
    {
        isForwarding = true;

        var path = forwardDirStack.Pop();
        backDirStack.Push(path);

        await BackAndForwardCallback.InvokeAsync(path);

        SetButon();
    }

    private async void Upward()
    {
        var dirInfo = new DirectoryInfo(CurrentDirectoryPath);

        if (dirInfo.Parent == null)
        {
            await UpwardCallback.InvokeAsync(string.Empty);
        }
        else
        {
            await UpwardCallback.InvokeAsync(dirInfo.Parent.FullName);
        }

        SetButon();
    }

}
