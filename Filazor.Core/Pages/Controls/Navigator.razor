@using System.IO

<style>
    .material-icons {
        font-size: 16px;
    }

    /* Dropdown Button */
    .dropbtn {
        background-color: transparent;
        color: gray;
        font-size: 16px;
        border: none;
    }

    /* Dropdown button on hover & focus */
    .dropbtn:hover:enabled, .dropbtn:focus:enabled {
        background-color: silver;
        cursor: pointer;
    }

    /* The container div - needed to position the dropdown content */
    .dropdown {
        position: relative;
        display: inline-block;
    }

    /* Dropdown Content (Hidden by Default) */
    .dropdown-content {
        display: none;
        position: absolute;
        background-color: #f1f1f1;
        min-width: 160px;
        box-shadow: 0px 8px 16px 0px rgba(0,0,0,0.2);
        z-index: 1;
    }

    /* Links inside the dropdown */
    .dropdown-content a {
        color: black;
        font-size: 12px;
        padding: 5px;
        text-decoration: none;
        display: block;
    }

    /* Change color of dropdown links on hover */
    .dropdown-content a:hover {
        background-color: #ddd
    }

    /* Show the dropdown menu (use JS to add this class to the .dropdown-content container when the user clicks on the dropdown button) */
    .show {
        display: block;
    }
</style>

<div class="btn-toolbar py-1" role="toolbar">

    <button type="button" class="btn btn-light btn-sm mr-1" disabled="@disabledBackButton" @onclick="Back">
        <i class="material-icons align-middle">
            arrow_back
        </i>
    </button>
    <button type="button" class="btn btn-light btn-sm mr-1" disabled="@disabledForwardButton" @onclick="Forward">
        <i class="material-icons align-middle">
            arrow_forward
        </i>
    </button>
    <div class="dropdown align-self-center mr-1" @onfocusout="OnFocusOutDropdown">
        <button @onclick="RecentLocations" class="dropbtn" disabled="@disabledRecentButton">
            <i class="material-icons align-middle">
                expand_more
            </i>
        </button>
        <div id="recentLocations" class="dropdown-content @recentLocationShow">
            @foreach (var path in selectedDirectoryList)
            {
                if (string.IsNullOrEmpty(path))
                {
                    <a href="" @onclick="ATagClickTest" @onclick:preventDefault>@HostName</a>
                }
                else
                {
                    DirectoryInfo directoryInfo = new DirectoryInfo(path);
                    <a href="#">@directoryInfo.Name</a>
                }
            }
        </div>
    </div>
    <button type="button" class="btn btn-light btn-sm mr-1" disabled="@disabledUpwardButton" @onclick="Upward">
        <i class="material-icons align-middle">
            arrow_upward
        </i>
    </button>

</div>

@code {

    private bool disabledBackButton = true;
    private bool disabledForwardButton = true;
    private bool disabledUpwardButton = true;
    private bool disabledRecentButton = true;

    private bool isBacking = false;
    private bool isForwarding = false;

    private string previousDirectoryPath;
    private string currentDirectoryPath;
    private Stack<string> backDirStack = new Stack<string>();
    private Stack<string> forwardDirStack = new Stack<string>();

    private List<string> selectedDirectoryList = new List<string>();

    private string recentLocationShow = "";

    [Parameter]
    public EventCallback<string> BackAndForwardCallback { get; set; }

    [Parameter]
    public EventCallback<string> UpwardCallback { get; set; }

    [Parameter]
    public string HostName { get; set; }

    [Parameter]
    public string SelectedDirectory { get; set; }

    private string previousDirectory { get; set; }


    // Before parameters are set
    public override Task SetParametersAsync(ParameterView parameters)
    {
        DebugPrint($"SetParametersAsync {SelectedDirectory}");

        previousDirectory = SelectedDirectory;

        return base.SetParametersAsync(parameters);
    }

    protected override Task OnInitializedAsync()
    {
        DebugPrint($"OnInitializedAsync {SelectedDirectory}");

        return base.OnInitializedAsync();
    }

    protected override Task OnParametersSetAsync()
    {
        DebugPrint($"OnParametersSetAsync {SelectedDirectory}");

        if (previousDirectory != SelectedDirectory)
        {
            selectedDirectoryList.Insert(0, SelectedDirectory);
            DebugPrint($"Added {SelectedDirectory}");
        }

        SetButon();

        return base.OnParametersSetAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            DebugPrint($"OnAfterRenderAsync firstRender {SelectedDirectory}");
        }
        else
        {
            DebugPrint($"OnAfterRenderAsync {SelectedDirectory}");
        }
    }

    private void SetButon()
    {
        disabledBackButton = backDirStack.Count == 0;
        disabledForwardButton = forwardDirStack.Count == 0;
        disabledUpwardButton = currentDirectoryPath == null;

        DebugPrint($"SelectedDirectoryList Count : {selectedDirectoryList.Count}");
        disabledRecentButton = selectedDirectoryList.Count <= 1;
    }

    private async void RecentLocations()
    {
        recentLocationShow = "show";
    }

    private async void OnFocusOutDropdown()
    {
        //Console.WriteLine("OnFocusOutDropdown");
        recentLocationShow = "";
    }

    private void ATagClickTest()
    {
        DebugPrint("ATagClickTest");
    }


    private void DebugPrint(string message)
    {
#if DEBUG
        Console.WriteLine("{0} >>> {1}", DateTime.Now.ToString("HH:mm:ss.fff"), message);
#endif
    }



    #region Depreciated Codes

    /// <summary>
    /// this property was depreciated.
    /// </summary>
    [Parameter]
    public string CurrentDirectoryPath
    {
        get
        {
            return currentDirectoryPath;
        }
        set
        {
            if (value == null)
            {
                Console.WriteLine("currentDirectory set value: null");
                currentDirectoryPath = null;
                return;
            }

            Console.WriteLine("currentDirectory set value: {0}", value);

            //if (currentDirectoryPath != null
            //    && currentDirectoryPath == value)
            //{
            //    return;
            //}

            //currentDirectoryPath = value;

            //if (isBacking == false)
            //{
            //    //Console.WriteLine("Back Push: {0}", value);
            //    backDirStack.Push(value);
            //}
            //else
            //{
            //    isBacking = false;
            //}

            //if (isForwarding == false)
            //{
            //    //Console.WriteLine("Foward Push: {0}", value);
            //    forwardDirStack.Push(value);
            //}
            //else
            //{
            //    isForwarding = false;
            //}
        }
    }


    private async void Back()
    {
        isBacking = true;

        var path = backDirStack.Pop();
        forwardDirStack.Push(path);

        await BackAndForwardCallback.InvokeAsync(path);

        SetButon();
    }

    private async void Forward()
    {
        isForwarding = true;

        var path = forwardDirStack.Pop();
        backDirStack.Push(path);

        await BackAndForwardCallback.InvokeAsync(path);

        SetButon();
    }

    private async void Upward()
    {
        var dirInfo = new DirectoryInfo(CurrentDirectoryPath);

        if (dirInfo.Parent == null)
        {
            await UpwardCallback.InvokeAsync(string.Empty);
        }
        else
        {
            await UpwardCallback.InvokeAsync(dirInfo.Parent.FullName);
        }

        SetButon();
    }

    #endregion
}
