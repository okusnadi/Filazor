@using Filazor.Core.Data

@inject FileSystemService FSService
@inject NavigationManager MyNavigationManager


<table class="table table-light table-sm table-hover small">
    <thead>
        <tr>
            <th>Name</th>
            <th>Date modified</th>
            <th>Type</th>
            <th>Size</th>
        </tr>
    </thead>
    <tbody>
        @if (rootDirInfo == null || (directoryInfos == null || fileInfos == null))
        {
            <tr>
                <td colspan="5" style="text-align: center;">This folder is empty.</td>
            </tr>
        }
        else
        {
            @foreach (var dirInfo in directoryInfos)
            {
                <tr @ondblclick="@(e => OnDblClickTR(dirInfo))">
                    <td>
                        <i class="material-icons align-middle" style="font-size: 18px; color: gold;">
                            folder
                        </i>
                        @dirInfo.Name
                    </td>
                    <td>@dirInfo.LastWriteTime</td>
                    <td>File folder</td>
                    <td></td>
                    <td></td>
                </tr>
            }

            @foreach (var fileInfo in fileInfos)
            {
                <tr @ondblclick="(e => OnDblClickFileTR(fileInfo))">
                    <td valign="middle">
                        <span class="oi oi-file" style="padding-left: 3px; margin-right: 2px; font-size: 14px; color: silver;"></span>
                        @fileInfo.Name
                    </td>
                    <td>@fileInfo.LastWriteTime</td>
                    <td>File</td>
                    <td style="text-align: right;">@GetFileSize(fileInfo)</td>
                    <td></td>
                </tr>
            }
        }
    </tbody>
</table>


@code {
    private System.IO.DirectoryInfo rootDirInfo;
    private System.IO.DirectoryInfo[] directoryInfos;
    private System.IO.FileInfo[] fileInfos;

    [Parameter]
    public EventCallback<System.IO.DirectoryInfo> OnDblClickCallback { get; set; }

    [Parameter]
    public System.IO.DirectoryInfo TargetRootDirectoryInfo
    {
        get
        {
            return rootDirInfo;
        }
        set
        {
            rootDirInfo = value;

            if (rootDirInfo == null)
                return;

            SetDirectory();
        }
    }

    private async void SetDirectory()
    {
        directoryInfos = await FSService.GetDirectoryInfos(rootDirInfo.FullName);

        try
        {
            fileInfos = await FSService.GetFiles(rootDirInfo);
        }
        catch (Exception e)
        {
            Console.WriteLine("Exception: {0}", e.Message);
        }

        await InvokeAsync(() => { this.StateHasChanged(); });
    }

    private async void OnDblClickTR(System.IO.DirectoryInfo dirInfo)
    {
        await OnDblClickCallback.InvokeAsync(dirInfo);
    }

    private void OnDblClickFileTR(System.IO.FileInfo fileInfo)
    {
        MyNavigationManager.NavigateTo($"/download?fileName={fileInfo.FullName}", true);
    }

    private string GetFileSize(System.IO.FileInfo fileInfo)
    {
        if (fileInfo == null)
        {
            return "";
        }

        var result = fileInfo.Length / 1024.0;
        result = Math.Ceiling(result);

        return $"{result.ToString("#,###")}KB";
    }
}
